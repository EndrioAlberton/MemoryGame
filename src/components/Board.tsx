import { useState, useEffect } from 'react';
import styled from 'styled-components';
import BoardSize from '../types/boardSizes';
import Card from './Card';

// Estiliza√ß√£o do container do tabuleiro
const BoardContainer = styled.div`
  display: flex;
  justify-content: flex-start;
  flex-direction: column;
  align-items: center;
  color: #3D2C29;
  position: relative;
  @media (max-width: 480px) {
  top: -20vw;
  }
`;

// Estiliza√ß√£o do grid que cont√©m os cards do tabuleiro
const BoardGrid = styled.div<{ size: number }>`
  display: grid;
  grid-template-columns: repeat(${props => props.size}, 1fr);
  grid-template-rows: repeat(${props => props.size}, 1fr);
  gap: 10px;
  max-width: 800px;
  margin: auto;
`;

// Estiliza√ß√£o do container de cada card
const CardContainer = styled.div`
  width: 100%; 
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  border: 2px solid #eee2d9;

  @media (max-width: 768px) {
    width: 80%; 
    height: 80%;
    border: 1px solid #eee2d9; 
  }

  @media (max-width: 480px) {
    width: 80%; 
    height: 80%;
    border: 1px solid #ccc; 
  }
`;

// Estiliza√ß√£o do container de estat√≠sticas do jogo
const StatsContainer = styled.div`
  font-family: 'Baloo', cursive;
  display: flex;
  justify-content: space-between;
  margin: 10px; 

  @media (max-width: 480px) {
    font-size: 26px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;

  }
`;

const Paragraph = styled.p`
  margin-right: 10px; /* Espa√ßo √† direita de cada par√°grafo */

    @media (max-width: 480px) {
    margin: 2px;
  }
`;

// Interface representando as propriedades do componente Board
interface BoardProps {
  size: BoardSize;
  onGameEnd: () => void;
}

// Interface representando os dados de um card
interface CardData {
  id: number;
  value: string;
  isFlipped: boolean;
}

// Fun√ß√£o para gerar cards aleat√≥rios com emojis
const generateRandomCards = (totalPairs: number): CardData[] => {
  const emojis = [
    'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'ü¶Å', 'üêÆ', 'üêØ', 'üê∏', 'üêµ', 'üê¶', 'üê§', 'üêß',
    'ü¶Ö', 'ü¶Ü', 'ü¶â', 'ü¶á', 'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú', 'ü¶ü', 'ü¶ó',
    'üï∑Ô∏è', 'ü¶Ç', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ', 'ü¶ï', 'üêô', 'ü¶ë', 'ü¶ê', 'ü¶û', 'ü¶Ä', 'üê°', 'üê†', 'üêü', 'üê¨',
    'üê≥', 'üêã', 'ü¶à', 'üêä', 'üêÖ', 'üêÜ', 'ü¶ì', 'ü¶ç', 'ü¶ß', 'üêò', 'ü¶õ', 'ü¶è', 'üê™', 'üê´', 'ü¶í', 'üêÉ',
    'üêÇ', 'üêÑ', 'üêé', 'üêñ', 'üêè', 'üêë', 'ü¶ô', 'üêê', 'ü¶å', 'üêï', 'üê©', 'ü¶Æ', 'üêï‚Äçü¶∫', 'üêà', 'üêà‚Äç‚¨õ',
    'üêì', 'ü¶É', 'ü¶ö', 'ü¶ú', 'ü¶¢', 'ü¶©', 'üïäÔ∏è', 'üêá', 'ü¶ù', 'ü¶®', 'ü¶°', 'ü¶¶', 'ü¶•', 'üêÅ', 'üêÄ', 'üêøÔ∏è',
    'ü¶î'
  ];

  // Cria um array de cards contendo pares de emojis.
  const cards = emojis.slice(0, totalPairs).flatMap((emoji, index) => [
    { id: index * 2, value: emoji, isFlipped: false },
    { id: index * 2 + 1, value: emoji, isFlipped: false }
  ]);

  // Embaralha os cards aleatoriamente para tornar o jogo mais desafiador.
  const shuffledCards = [...cards].sort(() => Math.random() - 0.5);
  return shuffledCards.map((card, index) => ({ ...card, id: index + 1 })); // ID √∫nico
};

// Componente Board que representa o tabuleiro do jogo
const Board: React.FC<BoardProps> = ({ size, onGameEnd }) => {
  const totalPairs = size * size / 2;
  const [cards, setCards] = useState<CardData[]>(generateRandomCards(totalPairs));
  const [flippedCardIds, setFlippedCardIds] = useState<number[]>([]);//Cartas que est√£o viradas
  const [matchedCardIds, setMatchedCardIds] = useState<number[]>([]);//cartas que encontraram o par
  const [moves, setMoves] = useState<number>(0);
  const [startTime, setStartTime] = useState<Date | null>(null);
  const [elapsedTime, setElapsedTime] = useState<number>(0);
  const [matchesCount, setMatchesCount] = useState<number>(0);
  const [timer, setTimer] = useState<number | null>(null);

  // Inicia o temporizador se ainda n√£o estiver em andamento.
  useEffect(() => {
    if (flippedCardIds.length === 1 && !startTime) {
      setStartTime(new Date());
    }
  }, [flippedCardIds, startTime]);

  // Este useEffect √© acionado sempre que o conjunto de cartas coincidentes √© completo.
  useEffect(() => {
    if (matchedCardIds.length === totalPairs * 2) {
      onGameEnd();
      clearInterval(timer!);
      alert(`Parab√©ns! Voc√™ completou o jogo em ${moves} movimentos e ${elapsedTime} segundos.`);
    }
  }, [matchedCardIds, totalPairs, onGameEnd, moves, elapsedTime, timer]);

  // Este useEffect √© acionado para iniciar e atualizar o temporizador do jogo.
  // Calcula o tempo decorrido desde o in√≠cio do jogo e atualiza o estado correspondente.
  useEffect(() => {
    const timerInterval = setInterval(() => {
      if (startTime) {
        const now = new Date();
        const elapsed = Math.floor((now.getTime() - startTime.getTime()) / 1000);
        setElapsedTime(elapsed);
      }
    }, 1000);

    setTimer(timerInterval);

    return () => clearInterval(timerInterval);
  }, [startTime]);

// Esta fun√ß√£o lida com o clique em um card individual.
// Altera o estado dos cards conforme necess√°rio com base no clique do jogador.
const handleCardClick = (id: number) => {
  // Verifica se o card j√° est√° virado ou j√° foi correspondido.
  const cardClicked = cards.find(card => card.id === id);
  if (!cardClicked || cardClicked.isFlipped || matchedCardIds.includes(id)) {
    return alert("Essa carta j√° est√° virada, escolha olha carta!"); // Retorna se o card j√° estiver virado ou correspondido.
  }

  // Verifica se h√° menos de dois cards virados.
  if (flippedCardIds.length < 2) {
    const updatedCards = cards.map(card =>
      card.id === id ? { ...card, isFlipped: true } : card
    );
    setFlippedCardIds([...flippedCardIds, id]);
    setCards(updatedCards);
  }

  // Verifica se dois cards foram virados.
  if (flippedCardIds.length === 1) {
    const [firstCardId] = flippedCardIds;
    const firstCard = cards.find(card => card.id === firstCardId);
    const secondCard = cards.find(card => card.id === id);

    // Verifica se os dois cards virados coincidem.
    if (firstCard && secondCard && firstCard.value === secondCard.value) {
      // Atualiza o estado dos cards correspondentes e a contagem de movimentos.
      setMatchedCardIds([...matchedCardIds, firstCard.id, secondCard.id]);
      setFlippedCardIds([]);
      setMatchesCount(matchesCount + 1);
    } else {
      // Se os cards n√£o coincidirem, vire-os de volta ap√≥s um breve intervalo.
      setTimeout(() => {
        const updatedCards = cards.map(card =>
          flippedCardIds.includes(card.id) ? { ...card, isFlipped: false } : card
        );
        setCards(updatedCards);
        setFlippedCardIds([]);
      }, 1000);
    }
    setMoves(moves + 1); // Incrementa o n√∫mero total de movimentos.
  }
};



  return (
    <BoardContainer>
      <StatsContainer>
        <Paragraph>Movimentos: {moves} </Paragraph>
        <Paragraph> N√∫mero de acertos: {matchesCount} </Paragraph>
        <Paragraph> Tempo decorrido: {elapsedTime} segundos</Paragraph>
      </StatsContainer>
      <BoardGrid size={size}>
        {cards.map((card) => (
          <CardContainer
            key={card.id} // Define uma chave √∫nica para cada card.
            onClick={() => handleCardClick(card.id)}
          >
            <Card
              id={card.id}
              value={card.value}
              isFlipped={card.isFlipped}
              onClick={() => handleCardClick(card.id)}
            />
          </CardContainer>
        ))}
      </BoardGrid>
    </BoardContainer>
  );
};

export default Board;
